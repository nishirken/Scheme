(load "utils/print.scm")

; 3.23
(define (make-deque)
    (define front '())
    (define rear '())
    
    (define (set-front! item) (set! front item))
    (define (set-rear! item)  (set! rear item))
    (define (empty-deque?) (null? front))
    (define (insert-front! item)
        (let ((new-front (cons (cons item '()) front)))
            (cond ((empty-deque?) (set-front! new-front)
                                (set-rear!  new-front)
                                dispatch)
                (else (set-cdr! (car front) new-front)
                        (set-front! new-front)
                        dispatch))))

    (define (insert-rear! item)
        (let ((new-rear (cons (cons item rear) '())))
            (cond ((empty-deque?) (set-front! new-rear)
                                (set-rear!  new-rear)
                                dispatch)
                (else (set-cdr! rear new-rear)
                        (set-rear! new-rear)
                        dispatch))))
    
    (define (delete-front!)
        (cond ((empty-deque?) (error "DELETE-FRONT! called on empty queue" front))
                (else (set-front! (cdr front))
                    (if (empty-deque?)
                        ()
                        (set-cdr!  (car front) '()))
                    dispatch)))

    (define (delete-rear!)
        (cond ((empty-deque?) (error "DELETE-REAR! called on empty queue" front))
                (else (set-rear! (cdar rear))
                    (if (null? rear)
                        (set-front! '())
                        (set-cdr! rear '()))
                    dispatch)))

    (define (print-queue)
        (define (print-end)
            (display ")") (newline))
        (display "(")
        (let print-next ((next front))
            (cond ((null? next) (print-end))
                ((null? (cdr next)) (display (caar next))
                                    (print-end))
                (else (display (caar next))
                        (display " ")
                        (print-next (cdr next))))))

    (define (dispatch m)
        (cond ((eq? m 'insert-front!) insert-front!)
                ((eq? m 'insert-rear!)  insert-rear!)
                ((eq? m 'delete-front!) (delete-front!))
                ((eq? m 'delete-rear!)  (delete-rear!))
                ((eq? m 'front)         front)
                ((eq? m 'rear)          rear)
                ((eq? m 'print)         (print-queue))
                (else (error "DEQUEUE -- Unknown instruction" m))))
    dispatch)

(define deque (make-deque))
; (((deque 'insert-front!) 'a) 'print)
; (((deque 'insert-front!) 'b) 'print)
; (((deque 'insert-rear!) 'c) 'print)
; (((deque 'insert-rear!) 'd) 'print)
; ((deque 'delete-front!) 'print)
; ((deque 'delete-front!) 'print)
; ((deque 'delete-rear!) 'print)
; ((deque 'delete-rear!) 'print)
